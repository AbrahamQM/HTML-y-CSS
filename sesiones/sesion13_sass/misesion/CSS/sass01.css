@charset "UTF-8";
/* Si pinchamos en la barra inferior del ide "VSC", el compilador ejecuta el código que hayamos 
puesto y genera un archivo con el mismo nombre que el archivo que estamos compilando.css y, 
un archivo .css.map con el mismo nombre 
automáticamente */
/* OJO, ver numeración de orden en los comentarios, en la hoja están desordenados para que el compilador los lea correctamente*/
/* pongo este elemento body sólo para que se vea mejor posicionado el contenido (NO APARECE EN EL TUTORIAL) */
body {
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* 5: Variables
    se definen con:
        $nombre: valor;
    ej:    
        $variable-blanco: #fff;
*/
/* 1: mixin, explicación en index.html*/
/* 2: mixin con parámetro de entrada:*/
/* 3: después de crear los mixin, podemos invocarlos como si fuera una hoja css normal usando @include*/
div {
  /*padding: 5px; modificado espaciado estático por variable despues de definirla en parte 5*/
  padding: 10px;
  height: 400px;
  width: 300px;
  /*margin-top: 20px;  modificado margen estático por variable despues de definirla en parte 5*/
  margin-top: 20px;
  /*color: blue;*/
  color: rgb(36, 36, 197);
  /* modificado color estático por variable despues de definirla en parte 5*/
  /*background-color: aqua;*/
  background-color: #6B6;
  /* modificado color estático por variable despues de definirla en parte 5*/
}

/*4: Llamada al mixin con parámetro de entrada, le pasamos 2em*/
/*@include encabezados(2em); modificado el parámetro estático por variable despues de definirla en parte 5*/
h1 {
  font-size: 2em;
  font-size: 1.3em;
  /*padding: 15px; modificado espaciado estático por variable despues de definirla en parte 5*/
  padding: 20px;
  /*color: blue;*/
  color: rgb(36, 36, 197);
  /* modificado color estático por variable despues de definirla en parte 5*/
  /*La instrucción include invoca al mixin con el nombre que indiquemos*/
}

h2 {
  font-size: 1.8em;
}

h3 {
  font-size: 1.2em;
}

/* 6: Anidamientos
    Se trabajan usando:
        &-nombre {}
    ej:
        &-borde{
        border: 1px solid #ddd;
        }
*/
.caja {
  padding: 10px;
  /*No es necesario usar variables, también se puede dejar esático así: padding: 20px; */
  font-size: 1em;
}
.caja-borde {
  border: 1px solid #ddd;
}
.caja-fondo {
  background-color: #6B6;
}
.caja-espaciadoextra {
  padding: 20px;
}

/* 7: placeholder o extends:
    se define usando:
        %nombre{}
    se invoca con la directiva @extend
    ej:
        h1 {
            @extend %heading;
        }

*/
h4 {
  background-color: blanchedalmond;
  color: brown;
  font-family: "Times New Roman", Times, serif;
  font-size: 2em;
}

/* 8: Dividir el código en módulos "Yo no lo hice para entenderlo mejor en el futuro"
    - ver como lo hizo el en su sesión, creando archivos que comienzan con '_' ej:
        _variables.scss
        _mixins.css
        ...
      Pegamos dentro de cada uno los tipos de elementos de sass que correspondan

    - para importar los archivos se haría poniendo al principio del documento.scss que estemos trabajando: @import "nombredelarchivo";
    va sin '_' ni la extensión.
    ej:
        @import "variables"
        @import "mixins"
        ...
*/
/* 9: Funciones

    - A diferencia de los demas elementos, tienen que retornar un valor.

    - se declaran usando @function nombreFuncion($variable: valorPorDefecto){ @return resultado } ej:
            @function numero($num: 500px){
                @return  $num/2;
            }

    -se invocan simplemente poniendo el nombre de la funcion(parámetro); ej: 
                .caja-naranja {
                    width: numero(300px);
                    background-color: orange;
                    text-align: center;
                }
*/
.uno {
  width: 250px;
  background-color: orange;
  text-align: center;
}

.dos {
  width: 300px;
  background-color: aqua;
  text-align: center;
}

/*  9.2: Funciones con listas de valores (nth) cómo parámetro
    funciones con listas de valores (pasadas por parámetro)
    - nth se refiere a una lista parámetros se define así:
        nth((lista de valores separados por ','), elemento que seleccionamos)
    -nth($list , $n)

    -ej: 
        nth((Helvetica, Arial, sans-serif), 3);

*/
.tres {
  width: 20%;
  /* funcion percentage ya viene built-in (no tiene que ver con los nth)
  ver en el enlace colocado en div class="uno" */
  font-family: sans-serif;
}

.cuatro {
  color: white;
}

.cinco {
  width: 50%;
}/*# sourceMappingURL=sass01.css.map */